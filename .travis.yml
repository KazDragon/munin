language: cpp
os: linux

compiler:
  - clang

linux_gcc: &linux_gcc
  os: linux
  dist: xenial
  compiler: gcc
  addons:
    apt:
      sources:
        - ubuntu-toolchain-r-test
        - sourceline: 'ppa:mhier/libboost-latest'
      packages:
        - g++-5
        - boost1.74

linux_clang: &linux_clang
  os: linux
  dist: xenial
  compiler: clang
  addons:
    apt:
      sources:
        - ubuntu-toolchain-r-test
        - llvm-toolchain-trusty-4.0
        - sourceline: 'ppa:mhier/libboost-latest'
      packages:
        - clang-4.0
        - boost1.74

jobs:
  include:
  - <<: *linux_gcc
    env:
      - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5 && CONFIG=Debug && SHARED=False"

  - <<: *linux_gcc
    env:
      - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5 && CONFIG=Debug && SHARED=True"

  - <<: *linux_gcc
    env:
      - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5 && CONFIG=Release && SHARED=False"

  - <<: *linux_gcc
    env:
      - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5 && CONFIG=Release && SHARED=True"

  - <<: *linux_gcc
    env:
      - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5 && CONFIG=Debug && SHARED=False && SANITIZE=address"

  - <<: *linux_gcc
    env:
      - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5 && CONFIG=Debug && SHARED=False && COVERAGE=True"

  - <<: *linux_clang
    env:
     - MATRIX_EVAL="CC=clang-4.0 && CXX=clang++-4.0 && CONFIG=Debug && SHARED=False"

  - <<: *linux_clang
    env:
     - MATRIX_EVAL="CC=clang-4.0 && CXX=clang++-4.0 && CONFIG=Debug && SHARED=True"

  - <<: *linux_clang
    env:
     - MATRIX_EVAL="CC=clang-4.0 && CXX=clang++-4.0 && CONFIG=Release && SHARED=False"

  - <<: *linux_clang
    env:
     - MATRIX_EVAL="CC=clang-4.0 && CXX=clang++-4.0 && CONFIG=Release && SHARED=True"

cache:
  - apt: true
  - directories:
    - $HOME/lcov
    - $HOME/nlohmann_json
    - $HOME/fmt
    - $HOME/terminalpp
    - $HOME/gtest

before_install:
# Set up CC/CXX variables
  - eval "${MATRIX_EVAL}"
  - export CMAKE=cmake
  - export COVERAGE=${COVERAGE:-False}
  - export SANITIZE=${SANITIZE:-off}

# install coverage software
  - if [ "$COVERAGE" == "True" ]; then gem install coveralls-lcov; fi

# workaround for not having lcov 1.13
  - if [ ! -d "lcov/usr/local/bin/lcov" ]; then
      wget http://ftp.de.debian.org/debian/pool/main/l/lcov/lcov_1.13.orig.tar.gz;
      tar -xzf lcov_1.13.orig.tar.gz;
      mkdir lcov || true;
      DESTDIR=$HOME/lcov make -C lcov-1.13/ install;
    fi
  - export LCOV=$HOME/lcov/usr/local/bin/lcov

# Install the nlohmann_json package
  - if [ ! -d "nlohmann_json/include/nlohmann/json.hpp" ]; then
      wget https://github.com/nlohmann/json/archive/v3.3.0.tar.gz;
      tar -xzf v3.3.0.tar.gz;
      mkdir nlohmann_json || true;
      cd json-3.3.0;
      $CMAKE -DCMAKE_INSTALL_PREFIX=$HOME/nlohmann_json -DJSON_BuildTests=OFF .;
      make -j2 && make install;
      cd ..;
    fi
  - export nlohmann_json_DIR=$HOME/nlohmann_json/lib/cmake/nlohmann_json

# Install libfmt
  - if [ ! -d "libfmt/include/fmt/format.h" ]; then
      wget https://github.com/fmtlib/fmt/archive/5.3.0.tar.gz;
      tar -xzf 5.3.0.tar.gz;
      mkdir libfmt || true;
      cd fmt-5.3.0;
      $CMAKE -DCMAKE_INSTALL_PREFIX=$HOME/libfmt -DFMT_TEST=OFF -DCMAKE_CXX_FLAGS='-fPIC' .;
      make -j2 && make install;
      cd ..;
    fi
  - export fmt_DIR=$HOME/libfmt/lib/cmake/fmt

# Install Terminal++
  - if [ ! -d "terminalpp/include/terminalpp-1.4.1/terminalpp/version.hpp" ]; then
      wget https://github.com/KazDragon/terminalpp/archive/v1.4.1.tar.gz;
      tar -xzf v1.4.1.tar.gz;
      mkdir terminalpp || true;
      cd terminalpp-1.4.1;
      $CMAKE -DCMAKE_INSTALL_PREFIX=$HOME/terminalpp -DBUILD_SHARED_LIBS=$SHARED -DTERMINALPP_WITH_TESTS=False .;
      make -j2 && make install;
      cd ..;
    fi
  - export terminalpp_DIR=$HOME/terminalpp/lib/cmake/terminalpp-1.4.1

# Install the Google Test suite
  - if [ ! -d "gtest/lib/libgmock.a" ]; then
      wget https://github.com/google/googletest/archive/release-1.10.0.tar.gz;
      tar -xzf release-1.10.0.tar.gz;
      mkdir gtest || true;
      cd googletest-release-1.10.0;
      $CMAKE -DCMAKE_INSTALL_PREFIX=$HOME/gtest .;
      make -j4 && make install;
      cd ..;
    fi
  - export GTest_DIR=$HOME/gtest/lib/cmake/GTest
      
before_script:
  - mkdir build || true
  - cd build
  - $CMAKE -DCMAKE_BUILD_TYPE=$CONFIG -DBUILD_SHARED_LIBS=$SHARED -DMUNIN_SANITIZE=$SANITIZE -DMUNIN_COVERAGE=$COVERAGE ..

script:
  - make VERBOSE=1
  - if [ "$COVERAGE" == "True" ]; then
        $LCOV --gcov-tool=gcov-5 --base-directory . --directory . --zerocounters -q;
    fi
  - make test

after_failure:
  - cat Testing/Temporary/LastTest.log

after_success:
  - if [ "$COVERAGE" == "True" ]; then
        $LCOV --gcov-tool=gcov-5 --base-directory . --directory .  --capture --output-file coverage.info;
        $LCOV --gcov-tool=gcov-5 --remove coverage.info '*/test/*' '/usr/*' '*/ext/*' '*/json/*' '*/.conan/*' --output-file coverage.info;
        $LCOV --gcov-tool=gcov-5 --list coverage.info;
        coveralls-lcov --repo-token ${COVERALLS_TOKEN} coverage.info;
    fi

notifications:
  email:
    on_success: change # [always|never|change] # default: change
    on_failure: change # [always|never|change] # default: always
  slack:
    rooms:
      - kazdragon:${SLACK_TOKEN}#ci TODO: new token.

